name: docker images build

on:
  push:
  workflow_dispatch:

jobs:

  check:
    name: Check if Docker files have changed
    outputs:
      run_petsc: ${{ steps.check_files.outputs.run_petsc }}
      run_lavavu: ${{ steps.check_files.outputs.run_lavavu }}
      run_base: ${{ steps.check_files.outputs.run_base }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check files
        id: check_files
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD > files.txt
              
          echo "::set-output name=run_base::false"
          echo "::set-output name=run_petsc::false"
          echo "::set-output name=run_lavavu::false"
          
          while IFS= read -r file
          do
            echo $file
            if [[ $file == "docs/development/docker/petsc/Dockerfile" ]]; then
              echo "Change to the Petsc Docker file have been detected."
              echo "::set-output name=run_petsc::true"
              echo "::set-output name=run_base::true"
              continue
            fi
            if [[ $file == "docs/development/docker/lavavu/Dockerfile" ]]; then
              echo "Change to the Lavavu Docker file have been detected."
              echo "::set-output name=run_lavavu::true"
              echo "::set-output name=run_base::true"
              continue
            fi
            if [[ $file == "docs/development/docker/base/Dockerfile" ]]; then
              echo "Change to the Base Docker file have been detected."
              echo "::set-output name=run_base::true"
              continue
            fi
          done < files.txt

  build_petsc_image:
    name: Build PETSc Docker image
    needs: check
    if: needs.check.outputs.run_petsc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build Petsc Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docs/development/docker/petsc/Dockerfile
          outputs: type=docker,dest=/tmp/petsc_docker.tar
          tags: underworldcode/base:petsc

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: petsc_docker
          path: /tmp/petsc_docker.tar 
  
  build_lavavu_image:
    name: Build Lavavu Docker image
    needs: check
    if: needs.check.outputs.run_lavavu == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build Lavavu Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docs/development/docker/lavavu/Dockerfile
          outputs: type=docker,dest=/tmp/lavavu_docker.tar
          tags: underworldcode/base:lavavu
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: lavavu_docker
          path: /tmp/lavavu_docker.tar 
  
  build_base_image:
    name: Build Base Docker image
    needs: [check, push_petsc_to_dockerhub, push_lavavu_to_dockerhub]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (needs.check.outputs.run_base == 'true')}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build Base Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docs/development/docker/base/Dockerfile
          outputs: type=docker,dest=/tmp/base_docker.tar
          tags: underworldcode/base
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: base_docker
          path: /tmp/base_docker.tar 

  build_underworld_image:
    name: Build Underworld Image
    runs-on: ubuntu-latest
    needs: [push_base_to_dockerhub]
    #if: always()
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Extract Branch name
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Update sha256
        run: |
          docker pull underworldcode/base
          SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' underworldcode/base)
          sed -i "/sha256/c\FROM ${SHA256} as base_runtime" ./docs/development/docker/underworld2/Dockerfile

      - name: Build Underworld Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docs/development/docker/underworld2/Dockerfile
          outputs: type=docker,dest=/tmp/underworld_docker.tar
          tags: underworldcode/underworld2:${{ env.BRANCH }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: underworld_docker
          path: /tmp/underworld_docker.tar 

  push_petsc_to_dockerhub:
    name: Push Petsc Image to DockerHub
    runs-on: ubuntu-latest
    needs: [check, build_petsc_image]
    if: github.event_name == 'release'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Petsc Image
        if: needs.check.outputs.run_petsc == 'true'
        uses: actions/download-artifact@v2
        with:
          name: petsc_docker
          path: /tmp
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push
        if: needs.check.outputs.run_petsc == 'true'
        run: |
          docker load --input /tmp/petsc_docker.tar
          docker push underworldcode/base:petsc

  push_base_to_dockerhub:
    name: Push Base Image to DockerHub
    runs-on: ubuntu-latest
    needs: [check, build_base_image]
    if: github.event_name == 'release'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Base Image
        if: needs.check.outputs.run_base == 'true'
        uses: actions/download-artifact@v2
        with:
          name: base_docker
          path: /tmp
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push
        if: needs.check.outputs.run_base == 'true'
        run: |
          docker load --input /tmp/base_docker.tar
          docker push underworldcode/base
      
  push_lavavu_to_dockerhub:
    name: Push Lavavu Image to DockerHub
    runs-on: ubuntu-latest
    needs: [check, build_lavavu_image]
    if: github.event_name == 'release'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Lavavu Image
        if: needs.check.outputs.run_lavavu == 'true'
        uses: actions/download-artifact@v2
        with:
          name: lavavu_docker
          path: /tmp

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Lavavu
        if: needs.check.outputs.run_lavavu == 'true'
        run: |
          docker load --input /tmp/lavavu_docker.tar
          docker push underworldcode/base:lavavu

  push_underword_to_dockerhub:
    name: Push Underworld Image to DockerHub
    runs-on: ubuntu-latest
    needs: [check, build_underworld_image]
    if: github.event_name == 'release'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Underworld Image
        uses: actions/download-artifact@v2
        with:
          name: underworld_docker
          path: /tmp
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Branch name
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Push Underworld image to DockerHub
        run: |
          docker load --input /tmp/underworld_docker.tar
          docker push underworldcode/underworld2:${{ env.BRANCH }}

  test_in_UW_Container:
    name: Test in Docker Container
    needs: [push_base_to_dockerhub]
    if: always()
    runs-on: ubuntu-latest
    container:
      image: underworldcode/base
      options: --user root
    steps:

      - name: Build dependencies
        run: |
          apt-get update -qq 
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential pkg-config python3-dev swig libxml2-dev

      - name: Runtime dependencies
        run: |
          apt-get update -qq
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends libxml2 libpython3.8    

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install Underworld
        run: |
          pip install -vvv .

      - name: Run Tests
        run: |
          pip install pytest
          python -m pytest -vvv docs/pytests

  conda_build:
      name: Conda Build (Python ${{matrix.python-version}} ${{ matrix.os }})
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: ["ubuntu-latest", "macos-latest"]
          python-version: ["3.7", "3.8", "3.9"]
      steps:
        - uses: actions/checkout@v2
        - uses: conda-incubator/setup-miniconda@v2
          with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
        
        - name: Config Conda
          shell: bash -l {0}
          run: |
              conda install --channel conda-forge conda-build anaconda-client conda-verify
              conda config --add channels conda-forge
              conda config --add channels underworldcode
              conda config --set anaconda_upload no
  
        - name: Config Conda For Upload
          if: github.event_name == 'release'
          shell: bash -l {0}
          run: conda config --set anaconda_upload yes
  
        - name: Upload new Packages
          if: github.event_name == 'release'
          shell: bash -l {0}
          run: |
              anaconda login --hostname github-actions-${{ matrix.os  }}-$RANDOM --username ${{ secrets.ANACONDA_USERNAME }} --password ${{ secrets.ANACONDA_PASSWORD }}
              conda-build --channel conda-forge --user underworldcode conda
              anaconda logout
