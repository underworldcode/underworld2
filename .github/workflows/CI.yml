name: CI

on:
  push:
  release:
  workflow_dispatch:

jobs:

  check:
    name: Check if Docker files have changed
    outputs:
      run_petsc: ${{ steps.check_files.outputs.run_petsc }}
      run_lavavu: ${{ steps.check_files.outputs.run_lavavu }}
      run_base: ${{ steps.check_files.outputs.run_base }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check files
        id: check_files
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD > files.txt
              
          echo "::set-output name=run_base::false"
          echo "::set-output name=run_petsc::false"
          echo "::set-output name=run_lavavu::false"
          
          while IFS= read -r file
          do
            echo $file
            if [[ $file == "docs/development/docker/petsc/Dockerfile" ]]; then
              echo "Change to the Petsc Docker file have been detected."
              echo "::set-output name=run_petsc::true"
              echo "::set-output name=run_base::true"
              continue
            fi
            if [[ $file == "docs/development/docker/lavavu/Dockerfile" ]]; then
              echo "Change to the Lavavu Docker file have been detected."
              echo "::set-output name=run_lavavu::true"
              echo "::set-output name=run_base::true"
              continue
            fi
            if [[ $file == "docs/development/docker/base/Dockerfile" ]]; then
              echo "Change to the Base Docker file have been detected."
              echo "::set-output name=run_base::true"
              continue
            fi
          done < files.txt

  build_petsc_image:
    name: Build PETSc Docker image
    needs: check
    if: needs.check.outputs.run_petsc == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      # List available platforms
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Petsc Docker Image
        uses: docker/build-push-action@v3.1.0
        with:
          context: .
          push: true
          file: ./docs/development/docker/petsc/Dockerfile
          platforms: linux/amd64, linux/arm64
          tags: underworldcode/petsc
      
  build_lavavu_image:
    name: Build Lavavu Docker image
    needs: check
    if: needs.check.outputs.run_lavavu == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Lavavu Docker Image
        uses: docker/build-push-action@v3.1.0
        with:
          context: .
          push: true
          file: ./docs/development/docker/lavavu/Dockerfile
          platforms: linux/amd64, linux/arm64
          tags: underworldcode/lavavu

  build_base_image:
    name: Build Base Docker image
    needs: [check, build_lavavu_image, build_petsc_image]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (needs.check.outputs.run_base == 'true')}}
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Base Docker Image
        uses: docker/build-push-action@v3.1.0
        with:
          context: .
          push: true
          file: ./docs/development/docker/base/Dockerfile
          platforms: linux/amd64, linx/arm64
          tags: underworldcode/base

  build_underworld_image:
    name: Build Underworld Image
    runs-on: ubuntu-latest
    needs: [build_base_image]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Update sha256
        run: |
          docker pull underworldcode/base
          SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' underworldcode/base)
          sed -i "/sha256/c\FROM ${SHA256} as base_runtime" ./docs/development/docker/underworld2/Dockerfile

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Underworld Docker Image
        uses: docker/build-push-action@v3.1.0
        with:
          context: .
          push: true
          file: ./docs/development/docker/underworld2/Dockerfile
          platforms: linux/amd64, linux/arm64
          tags: underworldcode/underworld2


  test_in_UW_Container:
    name: Test in Docker Container
    needs: [build_base_image]
    if: always()
    runs-on: ubuntu-latest
    container:
      image: underworldcode/base
      options: --user root
    steps:

      - name: Build dependencies
        run: |
          apt-get update -qq 
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential pkg-config python3-dev swig libxml2-dev cmake ninja-build

      - name: Runtime dependencies
        run: |
          apt-get update -qq
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends libxml2 libpython3.10

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install Underworld
        run: |
          pip install -vvv .

      - name: Run Tests
        run: |
          pip install pytest
          pytest -vvv docs/pytests
          cd docs/test
          cp -rf ../UWGeodynamics/examples UWGeodynamics/.
          cp -rf ../UWGeodynamics/tutorials UWGeodynamics/.
          cp -rf ../UWGeodynamics/benchmarks UWGeodynamics/.
          pytest -vvv UWGeodynamics


  conda_build:
      name: Conda Build (Python ${{matrix.python-version}} ${{ matrix.os }})
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: ["ubuntu-latest", "macos-latest"]
          python-version: ["3.8", "3.9", "3.10"]
      steps:
        - uses: actions/checkout@v2
        - uses: conda-incubator/setup-miniconda@v2
          with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
        
        - name: Config Conda
          shell: bash -l {0}
          run: |
              conda install --channel conda-forge conda-build anaconda-client conda-verify
              conda config --add channels conda-forge
              conda config --add channels underworldcode
              conda config --set anaconda_upload no
  
        - name: Config Conda For Upload
          if: github.event_name == 'release'
          shell: bash -l {0}
          run: conda config --set anaconda_upload yes
  
        - name: Upload new Packages
          if: github.event_name == 'release'
          shell: bash -l {0}
          run: |
              anaconda login --hostname github-actions-${{ matrix.os  }}-$RANDOM --username ${{ secrets.ANACONDA_USERNAME }} --password ${{ secrets.ANACONDA_PASSWORD }}
              conda-build --channel conda-forge --user geo-down-under conda
              anaconda logout

  pypi:
    runs-on: ${{ matrix.os }}
    env:
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Package for Pypi
        run: |
          python setup.py sdist
      - name: Upload to Pypi
        if: github.event_name == 'release'
        run: |
          pip install twine
          python -m twine upload dist/* -r pypi
