Import('env')
import os

#
# Need to make a copy because SCons uses the environment
# at its final state, so StGermain ends up depending on
# StgDomain, etc.
#

env = env.Clone()

#
# Inside each project we will be accessing headers without the
# project name as a prefix, so we need to let SCons know how to
# find those headers.
#

env.Append(CPPPATH=env['build_dir'] + '/include/libUnderworldPy')

#
# Keep a list of all the objects we build so we can make a library
# afterwards.
#

wrapperDict = {}

wrapperDict['StGermain_Tools'] = ['StGermain_Tools.c', 'StGermain_Tools_wrap.cxx']
wrapperDict['gLucifer'] = ['gLucifer_wrap.cxx']
# wrapperDict['ImportersToolbox'] = ['ImportersToolbox_wrap.cxx']
wrapperDict['petsc'] = ['petsc_wrap.cxx']
wrapperDict['c_arrays'] = ['c_arrays_wrap.cxx']
wrapperDict['c_pointers'] = ['c_pointers_wrap.cxx']
wrapperDict['Underworld'] = ['Underworld_wrap.cxx']
wrapperDict['StgDomain'] = ['StgDomain_wrap.cxx']
wrapperDict['StGermain'] = ['StGermain_wrap.cxx']
wrapperDict['StgFEM'] = ['StgFEM_wrap.cxx']
wrapperDict['Solvers'] = ['Solvers_wrap.cxx']
wrapperDict['PICellerator'] = ['PICellerator_wrap.cxx']
wrapperDict['Function'] = ['Function_wrap.cxx']

objs = []

#
# Process each directory uniformly.
#

for key,value in wrapperDict.iteritems():
    # Build our source files.
    objs = []
    for file in value:
        srcs = Glob('./'+file)
        objs += env.SharedObject(srcs, CPPDEFINES=env.get('CPPDEFINES', []))

    #
    # Build shared library.
    #
    if env['shared_libs']:
        env.SharedLibrary('lib/'+key+'_swig', objs)

#Build LavaVu interface without other libs
if env.get('with_graphics', None):
    env = env.Clone()
    env["LIBS"] = ['LavaVu']
    objs = []
    srcs = Glob('../gLucifer/Viewer/src/LavaVuPython_wrap.cxx')
    objs += env.SharedObject(srcs, CPPDEFINES=env.get('CPPDEFINES', []))
    # Build shared library.
    if env['shared_libs']:
        swiglib = env.SharedLibrary('lib/LavaVuPython_swig', objs)
        env.InstallAs(env['build_dir'] + '/lavavu/_LavaVuPython.so', swiglib)

    # add the lavavu guy here
    wrapperDict['LavaVuPython'] = ['LavaVuPython_wrap.cxx']

else:
    path = Dir('.').srcnode().abspath
    lvpy = os.path.join(path, 'LavaVuPython.py')
    if os.path.exists(lvpy):
        os.remove(lvpy)
    lvwrap = os.path.join(path, 'LavaVuPython_wrap.cxx')
    if os.path.exists(lvwrap):
        os.remove(lvwrap)

# if on osx, create symlink for python modules
import os
if env['SHLIBSUFFIX'] == '.dylib':
    def SymLink(target, source, env):
        os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))
    for key,value in wrapperDict.iteritems():
        destLink = os.path.join('..', env["build_dir"],'lib', 'lib'+key+'_swig.so')
        sourceFile = os.path.join('..', env["build_dir"],'lib', 'lib'+key+'_swig.dylib')
        env.Command(destLink, sourceFile, SymLink)
